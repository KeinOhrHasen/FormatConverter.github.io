{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/constants/leica/codes.ts","webpack:///./src/app/constants/leica/input-mode.ts","webpack:///./src/app/constants/leica/units.ts","webpack:///./src/app/services/leica/leica-gsi.service.ts","webpack:///./src/app/services/topcon/topcon.service.ts","webpack:///./src/app/shared/table-constructors/leica.ts","webpack:///./src/app/shared/table-constructors/topcon.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///fs (ignored)","webpack:///crypto (ignored)","webpack:///stream (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"form,\\r\\n.pick-format{\\r\\n    background-color: aquamarine;\\r\\n    padding: 2rem;\\r\\n    margin: 2rem auto;\\r\\n    width: 50%;\\r\\n    border-radius: 10px;\\r\\n}\\r\\n.example-radio-button{\\r\\n    display: block;\\r\\n    margin: 1rem;\\r\\n}\\r\\nform input{\\r\\n    margin: 1rem;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0lBRUksNkJBQTZCO0lBQzdCLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLG9CQUFvQjtDQUN2QjtBQUNEO0lBQ0ksZUFBZTtJQUNmLGFBQWE7Q0FDaEI7QUFFRDtJQUNJLGFBQWE7Q0FDaEIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImZvcm0sXHJcbi5waWNrLWZvcm1hdHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGFxdWFtYXJpbmU7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgbWFyZ2luOiAycmVtIGF1dG87XHJcbiAgICB3aWR0aDogNTAlO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxufVxyXG4uZXhhbXBsZS1yYWRpby1idXR0b257XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIG1hcmdpbjogMXJlbTtcclxufVxyXG5cclxuZm9ybSBpbnB1dHtcclxuICAgIG1hcmdpbjogMXJlbTtcclxufSJdfQ== */\"","module.exports = \"<form [formGroup]=\\\"formGroup\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  <input type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" /> <br>\\r\\n  <button mat-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"formGroup.invalid || formGroup.prestine\\\">Submit</button>\\r\\n  <button mat-button color=\\\"primary\\\" type=\\\"button\\\" [disabled]=\\\"formGroup.invalid || formGroup.prestine\\\" (click)=\\\"saveFile()\\\">Save file</button>\\r\\n  <button mat-button color=\\\"primary\\\" type=\\\"button\\\" (click)=\\\"creeteXLSX()\\\">Save EXEL file</button>\\r\\n</form>\\r\\n\\r\\n<div class=\\\"pick-format\\\">\\r\\n  <label id=\\\"example-radio-group-label\\\">Pick your favorite format</label>\\r\\n  <mat-radio-group\\r\\n    aria-labelledby=\\\"example-radio-group-label\\\"\\r\\n    class=\\\"example-radio-group\\\"\\r\\n    [(ngModel)]=\\\"choosenFormat\\\">\\r\\n    <mat-radio-button class=\\\"example-radio-button\\\" *ngFor=\\\"let format of all_formats\\\" [value]=\\\"format\\\">\\r\\n      {{format}}\\r\\n    </mat-radio-button>\\r\\n  </mat-radio-group>\\r\\n  <div>Choosed format is: {{choosenFormat}}</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<table class=\\\"sjs-table\\\">\\r\\n  <tr *ngFor=\\\"let row of data\\\">\\r\\n    <td *ngFor=\\\"let val of row\\\">\\r\\n      {{val}}\\r\\n    </td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\"","import { Component, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport * as XLSX from 'xlsx';\r\nimport { LeicaGsiService } from './services/leica/leica-gsi.service';\r\nimport { TopconService } from './services/topcon/topcon.service';\r\nimport { dataToExel_Leica } from './shared/table-constructors/leica'\r\nimport { dataToExel_Topcon } from './shared/table-constructors/topcon'\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent  {\r\n  public points;\r\n  public choosenFormat: string;\r\n  public  all_formats: string[] = ['.gsi', 'rts-6'];\r\n\r\n  formGroup = this.fb.group({\r\n    file: [null, Validators.required]\r\n  });\r\n\r\n  constructor( \r\n    private fb: FormBuilder, \r\n    private cd: ChangeDetectorRef, \r\n    private leicaGsiService: LeicaGsiService,\r\n    private topconService: TopconService,\r\n    ) {}\r\n  \r\n  onFileChange(event) {\r\n    const reader = new FileReader();\r\n \r\n    if(event.target.files && event.target.files.length) {\r\n      const [file] = event.target.files;\r\n      reader.readAsText(file);\r\n  \r\n      reader.onload = () => {\r\n        this.formGroup.patchValue({\r\n          file: reader.result\r\n       });\r\n    \r\n        // need to run CD since file load runs outside of zone\r\n        this.cd.markForCheck();\r\n      };\r\n    }\r\n  }\r\n\r\n  public onSubmit(){\r\n    // console.log(this.formGroup.value);\r\n    if (this.choosenFormat === '.gsi'){\r\n      this.points = this.leicaGsiService.getParsedData(this.formGroup.value.file);\r\n    }\r\n    else if (this.choosenFormat === 'rts-6'){\r\n      this.points = this.topconService.getParsedData(this.formGroup.value.file);\r\n    }\r\n    this.points.forEach((row)=> console.log(row))\r\n    // console.log(resultArray);\r\n\r\n  }\r\n\r\n  public saveFile(){\r\n    let text = this.formGroup.value.file;\r\n    let textToSaveAsBlob = new Blob([text], {type:\"text/plain\"});\r\n    let textToSaveAsURL  = window.URL.createObjectURL(textToSaveAsBlob);\r\n    let fileNameToSaveAs = 'result';\r\n\r\n    let downloadLink = document.createElement(\"a\");\r\n    downloadLink.download = fileNameToSaveAs;\r\n    downloadLink.innerHTML = \"Download File\";\r\n    downloadLink.href = textToSaveAsURL;\r\n    downloadLink.style.display = \"none\";\r\n    document.body.appendChild(downloadLink);\r\n \r\n    downloadLink.click();\r\n  }\r\n\r\n// xlsx part ------------------------------------------------\r\npublic dataToExel(pointsArray){\r\n  if (this.choosenFormat === '.gsi'){\r\n    return dataToExel_Leica(pointsArray);\r\n  }else if (this.choosenFormat === 'rts-6'){\r\n    return dataToExel_Topcon(pointsArray);\r\n  }\r\n}\r\n\r\n\r\npublic creeteXLSX(){\r\n  /* generate worksheet */\r\n  let ws: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet(this.dataToExel(this.points));\r\n\r\n  /* generate workbook and add the worksheet */\r\n  let wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n\r\n  /* save to file */\r\n  XLSX.writeFile(wb, 'SheetJS.xlsx');\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export const CODES = {\r\n    // General information\r\n    '11': 'Pointnumber',\r\n    '12': 'Instrument serial number',\r\n    '13': 'Instrument type',\r\n    '16': 'Station Pointnumber',\r\n    '17': 'Date',\r\n    '19': 'Time',\r\n\r\n    // Angles\r\n    '21': 'Hz',\r\n    '22': 'Vr',\r\n\r\n    // distances\r\n    '31': 'Sloping distance',\r\n    '32': 'Horizontal distance',\r\n    '33': 'Height difference',\r\n\r\n    // Addicent information for distance\r\n    '51': 'Constants', // ppm, mm\r\n    '52': 'number of measurements, standard deviation',\r\n    '53': 'Average square error',\r\n    '58': 'Prism constant',\r\n    '59': 'PPM', // (1/10 mm)ppm\r\n\r\n    // coordinates\r\n    '81': 'X - Target Easting',\r\n    '82': 'Y - Target Northing',\r\n    '83': 'H - Target Elevation',\r\n    '84': 'X - Station Easting',\r\n    '85': 'Y - Station Northing',\r\n    '86': 'H - Station Elevation',\r\n    '87': 'Reflector height',\r\n    '88': 'Instrument height',\r\n  }","export const INPUT_MODE = {\r\n    '0': 'Original measured values transferred from the instrument',\r\n    '1': 'Manual input from keyboard',\r\n    '2': 'Measured value, Hz-Correction ON',\r\n    '3': 'Measured value, Hz-Correction OFF',\r\n    '4': 'Result of special function',\r\n}","export const UNITS = {\r\n    '0': 'Meter (last digit: 1mm)',\r\n    '1': 'Feet (last digit: 1/1000ft)',\r\n    '2': '400 gon',\r\n    '3': '360° decimal',\r\n    '4': '360° sexagesimal',\r\n    '5': '6400 mil',\r\n    '6': 'Meter (last digit: 1/10mm)',\r\n    '7': 'Feet (last digit: 1/10‘000ft)',\r\n    '8':'Meter (last digit: 1/100mm)',\r\n}","import { Injectable } from '@angular/core';\r\nimport { CODES } from '../../constants/leica/codes'\r\nimport { UNITS } from '../../constants/leica/units';\r\nimport { INPUT_MODE } from '../../constants//leica/input-mode';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LeicaGsiService {\r\n\r\n  constructor() { }\r\n\r\n  private splitOnPoints(stringToParse: string){\r\n    let pointsArray = [];\r\n    let splittedOnRows = stringToParse.split('\\n');\r\n    splittedOnRows.forEach((row, index) => {\r\n      pointsArray[index] = row.split(' ')\r\n    })\r\n    return pointsArray\r\n  }\r\n\r\n  private parsePoints(pointsArr: string[]){\r\n\r\n    let points = [];\r\n    pointsArr.forEach((point: any ) => {\r\n      let newPoint = {};\r\n      point.forEach((word: string) => {\r\n        let format_length: number = 8;\r\n        word.length === 23 ? format_length = 16 : null;\r\n        newPoint['Format_name'] = 'GSI' + format_length;\r\n        let wordCode = word.slice(0, 2);\r\n\r\n        switch(wordCode){\r\n\r\n          case '11':\r\n            newPoint[CODES[wordCode]] = this.trimZeros(word.slice(-format_length));\r\n            newPoint['lineNumber'] = word.slice(2, 6);\r\n            break\r\n\r\n          case '12':\r\n            newPoint[CODES[wordCode]] = word.slice(-format_length);\r\n            break\r\n\r\n          case '13':\r\n            newPoint[CODES[wordCode]] = word.slice(-format_length);\r\n            break\r\n\r\n          case '16':\r\n            newPoint[CODES[wordCode]] = this.trimZeros(word.slice(-format_length));\r\n            break\r\n\r\n          case '17':\r\n            newPoint[CODES[wordCode]] = this.getDate(word, format_length);\r\n            break\r\n\r\n          case '19':\r\n            newPoint[CODES[wordCode]] = this.getTime(word, format_length);\r\n            break\r\n\r\n          \r\n\r\n\r\n          case '21':\r\n            // Automatic_index_information\r\n            newPoint['Automatic_index_information_HZ'] = this.getAutomaticIndex(word);\r\n            \r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n               \r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n    \r\n            // value information\r\n            newPoint[CODES[wordCode]] = this.getAngle(word, format_length);\r\n\r\n            break;\r\n\r\n\r\n          case '22':\r\n            // Automatic_index_information\r\n            newPoint['Automatic_index_information_HZ'] = this.getAutomaticIndex(word);\r\n\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n            \r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // value information\r\n            newPoint[CODES[wordCode]] = this.getAngle(word, format_length);\r\n            break;\r\n\r\n          case '31':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '32':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n            \r\n          case '33':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '51':\r\n            let ppmArr  = word.trim().split('').splice(6, 5);\r\n            let prismConstArr = word.split('').splice(12, 5)\r\n            let ppm = +ppmArr.join('');\r\n            let prismConst = +prismConstArr.join('');\r\n            // parse PPM value and prismConst to milimeter\r\n            // console.log(ppm, prismConst )\r\n            newPoint[CODES['58']] = prismConst;\r\n            newPoint[CODES['59']] = ppm;\r\n            break;\r\n\r\n          case '58':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // value\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '59':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // value\r\n            newPoint[CODES[wordCode]] = +word.slice(-9)/10000;\r\n            break;\r\n\r\n          case '81':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '82':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '83':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '84':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '85':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '86':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n\r\n          case '87':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n            \r\n          case '88':\r\n            // Units\r\n            newPoint[CODES[wordCode] + '_unit'] = this.getUnitName(word);\r\n\r\n            // input mode\r\n            newPoint[CODES[wordCode] + '_input_mode'] = this.getInputMode(word);\r\n\r\n            // parse Sloping distance to meter or feets\r\n            newPoint[CODES[wordCode]] = this.getDistanceInMt_Ft(word, format_length);\r\n            break;\r\n      }\r\n\r\n      });\r\n      points.push(newPoint);\r\n    });\r\n\r\n    return points\r\n  }\r\n\r\n\r\n\r\n\r\n  public getParsedData(stringToParse: string){\r\n    let pointArr = this.splitOnPoints(stringToParse);      \r\n    return this.parsePoints(pointArr)\r\n  }\r\n\r\n  // GSI8\r\n  private getAngle(survey: string, format_length){\r\n    let unit = this.getUnitCode(survey);\r\n    let divisor = 100000;\r\n\r\n    if (unit === '5'){\r\n      divisor = 10000;\r\n      return this.getDecimalAngle(survey, divisor, format_length)\r\n\r\n    }else if (unit === '4'){\r\n      return this.getSexagesimalAngle(survey, format_length)\r\n\r\n    } else {\r\n      return this.getDecimalAngle(survey, divisor, format_length)\r\n    }\r\n  }\r\n\r\n  // GSI8\r\n  private getDecimalAngle(survey: string, divisor:number, format_length:number){\r\n    let angleArr  = survey.split('').slice(-format_length-1);\r\n    let angle = +(angleArr[0] + '1') * ( +angleArr.slice(-8).join('')/divisor );\r\n\r\n    return angle\r\n  }\r\n\r\n  // GSI8\r\n  private getSexagesimalAngle(survey: string, format_length:number){\r\n    let angleArr  = survey.split('').slice(-format_length-1);\r\n    let degrees = +angleArr.slice(-8, -5).join('');\r\n    let minutes = +angleArr.slice(-5, -3).join('');\r\n    let seconds = +angleArr.slice(-3).join('')/10;\r\n\r\n    return +(angleArr[0] + '1') * (degrees + minutes/60 + seconds/3600)\r\n  }\r\n\r\n  private getAutomaticIndex(word){\r\n    let automaticIndexHZ = word.trim().split('').splice(3, 1)[0];\r\n    if (automaticIndexHZ === \"0\"){\r\n      return 'OFF';\r\n    }\r\n    if (automaticIndexHZ === \"1\" || automaticIndexHZ === \"3\" ) {\r\n      return 'OPERATING';\r\n    }\r\n  }          \r\n\r\n  private getUnitCode(survey){\r\n    return  survey.split('').splice(5, 1)[0];\r\n  }\r\n\r\n  private getInputMode(word){\r\n    let inputModeCode = word.trim().split('').splice(4, 1)[0];\r\n    let mode = INPUT_MODE[inputModeCode];\r\n\r\n    return mode\r\n  } \r\n\r\n  // GSI8, GSI16\r\n  private getDistanceInMt_Ft(word, format_length: number){\r\n    let unit = this.getUnitCode(word);\r\n    let numbersArray  = word.trim().split('').slice(-format_length-1);\r\n    let divisor = 1000;\r\n\r\n    if (unit === \"6\" || unit === \"7\"){\r\n      divisor = 10000;\r\n    }\r\n    else if (unit === \"8\"){\r\n      divisor = 100000;\r\n    }\r\n\r\n    let value = +(numbersArray[0] + '1') * ( + +numbersArray.slice(-format_length).join('')/divisor);\r\n    console.log(numbersArray)\r\n    return value\r\n  }\r\n\r\n  private getUnitName(word){\r\n    let unit = this.getUnitCode(word);\r\n    let unitName = UNITS[unit];\r\n    \r\n    return unitName\r\n  }\r\n\r\n  // GSI8\r\n  private getDate(word, length_format){\r\n   let  dateString = word.slice(-length_format);\r\n   let day = dateString.slice(-8, -6);\r\n   let mounth = dateString.slice(-6, -4);\r\n   let year = dateString.slice(-4);\r\n\r\n   return day + '.' + mounth + '.' + year\r\n  }\r\n\r\n   // GSI8\r\n  private getTime(word, length_format){\r\n    let  dateString = word.slice(-length_format);\r\n    let day = dateString.slice(-8, -6);\r\n    let mounth = dateString.slice(-6, -4);\r\n    let hours = dateString.slice(-4, -2);\r\n    let minutes = dateString.slice(-2);\r\n\r\n    return day + '.' + mounth + ' ' + hours + \":\" + minutes\r\n  }\r\n  \r\n  private trimZeros(value: string){\r\n    return value.replace(/^0+/, '')\r\n  }\r\n \r\n}\r\n","import { Injectable } from '@angular/core';\n\nexport interface Point {\n  isEmpty: boolean;\n  description?: string;\n  done?: boolean;\n}\nexport interface Station {\n  isEmpty?: boolean;\n  description?: string;\n  done?: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopconService {\n\n  constructor() { }\n\n  private splitOnPoints(stringToParse: string){\n    let rowsArray = [];\n    let splittedOnRows = stringToParse.split('\\n');\n    splittedOnRows.forEach((row, index) => {\n      if (row !== \"\"){\n        rowsArray[index] = row.split(/ +/)\n      }\n    })\n    console.log(rowsArray)\n    return rowsArray\n  }\n\n  private parsePoints(pointsArr: string[]){\n\n    let points = [];\n    let newStation: Station = {};\n    let newPoint: Point = {isEmpty: true};\n    let UNITS: Object = {};\n    let xyzForStation = true;\n\n    pointsArr.forEach((row: any ) => {\n\n\n      switch(row[0]){\n        case 'UNITS':\n          let [linear, anglar] = row[1].split(',')\n          UNITS['linear'] = linear;\n          UNITS['anglar'] = anglar;\n          break\n\n        case 'STN':\n          newStation = <Station> new Object();\n          xyzForStation = true;\n          let [name, height] = row[1].split(',')\n\n          newStation['stationName'] = name;\n          newStation['stationHeight'] = height;\n          break\n\n        case \"BKB\":\n          let [BKB_Name, BKB_Azimuth, BKB_hz_angle] = row[1].split(',');\n          newStation['BKB_Name'] = BKB_Name;\n          newStation['BKB_Azimuth'] = BKB_Azimuth;\n          newStation['BKB_hz_angle'] = BKB_hz_angle;\n          break\n\n        case \"BS\":\n          let [BS_Name, BS_height] = row[1].split(',');\n          newStation['BS_Name'] = BS_Name;\n          newStation['BS_height'] = BS_height;\n          break\n\n        case 'SS':\n          if (!newPoint.isEmpty){\n            points.push(newPoint)\n          }\n          newPoint = <Point> new Object();\n          xyzForStation = false;\n          let [name1, targetHeight, pointCode] = row[1].split(',')\n\n          newPoint['isEmpty'] = false\n          newPoint['pointName'] = name1;\n          newPoint['pointTargetHeight'] = targetHeight;\n          newPoint['pointCode'] = pointCode;\n          newPoint['stationName'] = newStation['stationName']\n          newPoint['stationHeight'] = newStation['stationHeight']\n          newPoint['linearUnit'] = UNITS['linear'];\n          newPoint['angularUnit'] = UNITS['anglar'];\n\n          if(newStation['X - Station Easting']){\n            newPoint['X - Station Easting'] = newStation['X - Station Easting'];\n            newPoint['Y - Station Northing'] = newStation['Y - Station Northing'];\n            newPoint['H - Station Elevation'] = newStation['H - Station Elevation'];\n          }\n\n          break\n\n        case 'HV':\n          let [hzAngle, vrAngle] = row[1].split(',')\n          newPoint['HZ'] = hzAngle;\n          newPoint['VR'] = vrAngle;\n          \n\n          // points.push(newPoint); \n          break\n\n        case 'SD':\n          let [hzAngle1, vrAngle1, slopeDistance] = row[1].split(',')\n          newPoint['HZ'] = hzAngle1;\n          newPoint['VR'] = vrAngle1;\n          newPoint['Sloping distance'] = slopeDistance;\n          // points.push(newPoint);\n          break\n\n        case 'HD':\n          let [hzAngle2, s, dH] = row[1].split(',')\n          newPoint['HZ'] = hzAngle2;\n          newPoint['Horizontal excess'] = s;\n          newPoint['Height difference'] = dH;\n          // points.push(newPoint);\n          break\n\n        case 'XYZ':\n          let [x, y, z] = row[1].split(',')\n\n          if (xyzForStation){\n            // xyzForStation = false;\n\n            newStation['X - Station Easting'] = x;\n            newStation['Y - Station Northing'] = y;\n            newStation['H - Station Elevation'] = z;\n          }\n          else{\n            newPoint['X - Target Easting'] = x;\n            newPoint['Y - Target Northing'] = y;\n            newPoint['H - Target Elevation'] = z;\n          }\n          break\n      }\n    })\n    \n    points.push(newPoint)\n    return points\n  }\n  \n  public getParsedData(stringToParse: string){\n    let pointArr = this.splitOnPoints(stringToParse);      \n    return this.parsePoints(pointArr)\n  }\n\n}\n","export const dataToExel_Leica = function(pointsArray){\r\n    let data = [[\r\n    \"Point Number\",\r\n    \"Horizontal Angle\",\r\n    \"Vertical Angle\",\r\n    \"Sloping distance\",\r\n    \"Horizontal distance\",\r\n    \"Height difference\",\r\n    \"X - Target Easting\",\r\n    \"Y - Target Northing\",\r\n    \"H - Target Elevation\",\r\n    \"X - Station Easting\",\r\n    \"Y - Station Northing\",\r\n    \"H - Station Elevation\",\r\n    \"Reflector height\",\r\n    \"Instrument height\",\r\n    ]];\r\n    pointsArray.forEach((point) => {\r\n      let exelArray = [\r\n        point.Pointnumber,\r\n        point.Hz,\r\n        point.Vr,\r\n        point[\"Sloping distance\"]      || '-',\r\n        point[\"Horizontal distance\"]   || '-',\r\n        point[\"Height difference\"]     || '-',\r\n        point[\"X - Target Easting\"]    || '-',\r\n        point[\"Y - Target Northing\"]   || '-',\r\n        point[\"H - Target Elevation\"]  || '-',\r\n        point[\"X - Station Easting\"]   || '-',\r\n        point[\"Y - Station Northing\"]  || '-',\r\n        point[\"H - Station Elevation\"] || '-',\r\n        point[\"Reflector height\"]      || '-',\r\n        point[\"Instrument height\"]     || '-',\r\n      ];\r\n      data.push(exelArray)\r\n    })\r\n  \r\n    return data\r\n  }\r\n","export const dataToExel_Topcon = function(pointsArray){\r\n  let data = [[\r\n  \"Point Number\",\r\n  \"Station Name\",\r\n  \"Station Height\",\r\n  \"Horizontal Angle\",\r\n  \"Vertical Angle\",\r\n  \"Sloping distance\",\r\n  \"Horizontal excess\",\r\n  \"Height difference\",\r\n  \"X - Target Easting\",\r\n  \"Y - Target Northing\",\r\n  \"H - Target Elevation\",\r\n  \"X - Station Easting\",\r\n  \"Y - Station Northing\",\r\n  \"H - Station Elevation\",\r\n  ]];\r\n  pointsArray.forEach((point) => {\r\n    let exelArray = [\r\n      point.pointName,\r\n      point[\"stationName\"],\r\n      point[\"stationHeight\"],\r\n      point.HZ                       || '-',\r\n      point.VR                       || '-',\r\n      point[\"Sloping distance\"]      || '-',\r\n      point[\"Horizontal excess\"]     || '-',\r\n      point[\"Height difference\"]     || '-',\r\n      point[\"X - Target Easting\"]    || '-',\r\n      point[\"Y - Target Northing\"]   || '-',\r\n      point[\"H - Target Elevation\"]  || '-',\r\n      point[\"X - Station Easting\"]   || '-',\r\n      point[\"Y - Station Northing\"]  || '-',\r\n      point[\"H - Station Elevation\"] || '-',\r\n    ];\r\n    data.push(exelArray)\r\n  })\r\n\r\n  return data\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}